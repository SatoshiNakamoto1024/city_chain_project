# \city_chain_project\DAGs\libs\algorithm\poh_holdmetrics\poh_holdmetrics_python\poh_holdmetrics\protocols\hold_pb2_grpc.py
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import hold_pb2 as hold__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in hold_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class HoldMetricsStub(object):
    """────────── Services ──────────────────────────

    Write‑side service：データ登録＋統計取得
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Broadcast = channel.stream_stream(
                '/poh.HoldMetrics/Broadcast',
                request_serializer=hold__pb2.HoldMsg.SerializeToString,
                response_deserializer=hold__pb2.HoldAck.FromString,
                _registered_method=True)
        self.Record = channel.unary_unary(
                '/poh.HoldMetrics/Record',
                request_serializer=hold__pb2.HoldMsg.SerializeToString,
                response_deserializer=hold__pb2.HoldAck.FromString,
                _registered_method=True)
        self.Stats = channel.unary_stream(
                '/poh.HoldMetrics/Stats',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=hold__pb2.HoldStat.FromString,
                _registered_method=True)


class HoldMetricsServicer(object):
    """────────── Services ──────────────────────────

    Write‑side service：データ登録＋統計取得
    """

    def Broadcast(self, request_iterator, context):
        """① 双方向ストリーム → 高スループット一括登録向け
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Record(self, request, context):
        """② 単発登録 → テスト/簡易クライアント向け
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stats(self, request, context):
        """③ **Stats RPC**  ← テストコードが期待
        空リクエストで最新スナップショットをサーバ側からストリーム返却
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HoldMetricsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Broadcast': grpc.stream_stream_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=hold__pb2.HoldMsg.FromString,
                    response_serializer=hold__pb2.HoldAck.SerializeToString,
            ),
            'Record': grpc.unary_unary_rpc_method_handler(
                    servicer.Record,
                    request_deserializer=hold__pb2.HoldMsg.FromString,
                    response_serializer=hold__pb2.HoldAck.SerializeToString,
            ),
            'Stats': grpc.unary_stream_rpc_method_handler(
                    servicer.Stats,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=hold__pb2.HoldStat.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poh.HoldMetrics', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('poh.HoldMetrics', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class HoldMetrics(object):
    """────────── Services ──────────────────────────

    Write‑side service：データ登録＋統計取得
    """

    @staticmethod
    def Broadcast(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/poh.HoldMetrics/Broadcast',
            hold__pb2.HoldMsg.SerializeToString,
            hold__pb2.HoldAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Record(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poh.HoldMetrics/Record',
            hold__pb2.HoldMsg.SerializeToString,
            hold__pb2.HoldAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/poh.HoldMetrics/Stats',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            hold__pb2.HoldStat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HoldMetricsQueryStub(object):
    """Read‑side service：Pull 型・運用用 (必要なら)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSnapshot = channel.unary_stream(
                '/poh.HoldMetricsQuery/GetSnapshot',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=hold__pb2.HoldStat.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/poh.HoldMetricsQuery/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=hold__pb2.HoldAck.FromString,
                _registered_method=True)


class HoldMetricsQueryServicer(object):
    """Read‑side service：Pull 型・運用用 (必要なら)
    """

    def GetSnapshot(self, request, context):
        """全ホルダーの集計をストリームで取得（Stats と重複可）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """ヘルスチェック
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HoldMetricsQueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSnapshot,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=hold__pb2.HoldStat.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=hold__pb2.HoldAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poh.HoldMetricsQuery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('poh.HoldMetricsQuery', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class HoldMetricsQuery(object):
    """Read‑side service：Pull 型・運用用 (必要なら)
    """

    @staticmethod
    def GetSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/poh.HoldMetricsQuery/GetSnapshot',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            hold__pb2.HoldStat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poh.HoldMetricsQuery/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            hold__pb2.HoldAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
