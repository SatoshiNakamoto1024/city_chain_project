# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from poh_network.protocols import poh_pb2 as poh__network_dot_protocols_dot_poh__pb2


class PohServiceStub(object):
    """===============================================================
    SERVICE DEFINITIONS
    ===============================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Broadcast = channel.unary_unary(
                '/poh.PohService/Broadcast',
                request_serializer=poh__network_dot_protocols_dot_poh__pb2.Tx.SerializeToString,
                response_deserializer=poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
                )
        self.BroadcastBatch = channel.unary_unary(
                '/poh.PohService/BroadcastBatch',
                request_serializer=poh__network_dot_protocols_dot_poh__pb2.TxBatch.SerializeToString,
                response_deserializer=poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
                )
        self.StreamTx = channel.stream_stream(
                '/poh.PohService/StreamTx',
                request_serializer=poh__network_dot_protocols_dot_poh__pb2.Tx.SerializeToString,
                response_deserializer=poh__network_dot_protocols_dot_poh__pb2.Tx.FromString,
                )
        self.Ping = channel.unary_unary(
                '/poh.PohService/Ping',
                request_serializer=poh__network_dot_protocols_dot_poh__pb2.Empty.SerializeToString,
                response_deserializer=poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
                )
        self.RegisterPeer = channel.unary_unary(
                '/poh.PohService/RegisterPeer',
                request_serializer=poh__network_dot_protocols_dot_poh__pb2.Peer.SerializeToString,
                response_deserializer=poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
                )
        self.ListPeers = channel.unary_unary(
                '/poh.PohService/ListPeers',
                request_serializer=poh__network_dot_protocols_dot_poh__pb2.Empty.SerializeToString,
                response_deserializer=poh__network_dot_protocols_dot_poh__pb2.PeerList.FromString,
                )


class PohServiceServicer(object):
    """===============================================================
    SERVICE DEFINITIONS
    ===============================================================

    """

    def Broadcast(self, request, context):
        """---- Tx Broadcast ------------------------------------------------

        * 単発送信: クライアント → サーバ 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastBatch(self, request, context):
        """* バッチ送信: クライアント → サーバ 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTx(self, request_iterator, context):
        """* 両方向ストリーミング: pub/sub に近い
        クライアント側が Tx を送ると同時に
        サーバ側がネットワーク全体から届いた Tx を push する 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """---- Health / Ping ----------------------------------------------

        * 単純に alive 判定用 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterPeer(self, request, context):
        """---- Peer Management --------------------------------------------

        * ピア登録要求 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPeers(self, request, context):
        """* ピア一覧を取得 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PohServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=poh__network_dot_protocols_dot_poh__pb2.Tx.FromString,
                    response_serializer=poh__network_dot_protocols_dot_poh__pb2.Ack.SerializeToString,
            ),
            'BroadcastBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastBatch,
                    request_deserializer=poh__network_dot_protocols_dot_poh__pb2.TxBatch.FromString,
                    response_serializer=poh__network_dot_protocols_dot_poh__pb2.Ack.SerializeToString,
            ),
            'StreamTx': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTx,
                    request_deserializer=poh__network_dot_protocols_dot_poh__pb2.Tx.FromString,
                    response_serializer=poh__network_dot_protocols_dot_poh__pb2.Tx.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=poh__network_dot_protocols_dot_poh__pb2.Empty.FromString,
                    response_serializer=poh__network_dot_protocols_dot_poh__pb2.Ack.SerializeToString,
            ),
            'RegisterPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterPeer,
                    request_deserializer=poh__network_dot_protocols_dot_poh__pb2.Peer.FromString,
                    response_serializer=poh__network_dot_protocols_dot_poh__pb2.Ack.SerializeToString,
            ),
            'ListPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPeers,
                    request_deserializer=poh__network_dot_protocols_dot_poh__pb2.Empty.FromString,
                    response_serializer=poh__network_dot_protocols_dot_poh__pb2.PeerList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poh.PohService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PohService(object):
    """===============================================================
    SERVICE DEFINITIONS
    ===============================================================

    """

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poh.PohService/Broadcast',
            poh__network_dot_protocols_dot_poh__pb2.Tx.SerializeToString,
            poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poh.PohService/BroadcastBatch',
            poh__network_dot_protocols_dot_poh__pb2.TxBatch.SerializeToString,
            poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTx(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/poh.PohService/StreamTx',
            poh__network_dot_protocols_dot_poh__pb2.Tx.SerializeToString,
            poh__network_dot_protocols_dot_poh__pb2.Tx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poh.PohService/Ping',
            poh__network_dot_protocols_dot_poh__pb2.Empty.SerializeToString,
            poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poh.PohService/RegisterPeer',
            poh__network_dot_protocols_dot_poh__pb2.Peer.SerializeToString,
            poh__network_dot_protocols_dot_poh__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poh.PohService/ListPeers',
            poh__network_dot_protocols_dot_poh__pb2.Empty.SerializeToString,
            poh__network_dot_protocols_dot_poh__pb2.PeerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
