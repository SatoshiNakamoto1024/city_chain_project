name: CI

# プッシュ／プルリクエストをトリガー
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    # 複数 OS・Python バージョンのマトリクス
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.10, 3.11, 3.12]
    runs-on: ${{ matrix.os }}

    steps:
      # ソースをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # Python をセットアップ
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # pip を最新化
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      # 各パッケージを editable install
      - name: Install poh_storage (with test deps)
        run: |
          cd poh_storage
          python -m pip install -e .[test]
          cd ..

      - name: Install poh_network (with test deps)
        run: |
          cd poh_network
          python -m pip install -e .[test]
          cd ..

      - name: Install poh_config (with test deps)
        run: |
          cd poh_config
          python -m pip install -e .[test]
          cd ..

      # 依存関係に他のパッケージがあればここで pip install 追加
      # 例: poh_network が poh_storage に依存している場合は poh_storage を先にインストール済み

      # poh_storage のテスト
      - name: Test poh_storage
        run: |
          cd poh_storage
          pytest poh_storage/tests --junitxml=../../artifacts/poh_storage-test-results.xml

      # poh_network のテスト
      - name: Test poh_network
        run: |
          cd poh_network
          pytest poh_network/tests --junitxml=../../artifacts/poh_network-test-results.xml

      # poh_config のテスト
      - name: Test poh_config
        run: |
          cd poh_config
          pytest poh_config/tests --junitxml=../../artifacts/poh_config-test-results.xml

      # ビルド成果物の生成 (Ubuntu 上のみ)
      - name: Build wheels
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install build
          python -m build --wheel --outdir dist

      # 成果物をアーティファクトとしてアップロード (Ubuntu 上のみ)
      - name: Upload wheels artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.python-version }}
          path: dist/*.whl

      # JUnit レポートをアップロード
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: artifacts/*.xml
