name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# 共通環境変数
env:
  CARGO_TERM_COLOR: always
  MATURIN_OUTPUT_DIR: wheelhouse        # maturin が吐く先

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:              [ubuntu-latest, macos-latest, windows-latest]
        python-version:  ["3.9", "3.10", "3.11", "3.12"]
        rust-toolchain:  ["stable"]

    steps:
    # ────────────────────────────────
    # 1. チェックアウト & キャッシュ
    # ────────────────────────────────
    - uses: actions/checkout@v4

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key:  ${{ runner.os }}-cargo-reg-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key:  ${{ runner.os }}-cargo-build-${{ github.sha }}

    # ────────────────────────────────
    # 2. Rust セットアップ & テスト
    # ────────────────────────────────
    - name: Install Rust
      uses: actions/setup-rust@v1
      with:
        rust-version: ${{ matrix.rust-toolchain }}

    # fmt / clippy は 1 回だけで OK
    - name: cargo fmt & clippy (lint)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets -- -D warnings

    - name: cargo test
      run: cargo test --all --verbose

    # ────────────────────────────────
    # 3. Python セットアップ & wheel ビルド
    # ────────────────────────────────
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build/test deps
      run: |
        python -m pip install --upgrade pip
        pip  install maturin pytest pytest-asyncio

    - name: Build wheel with maturin (release)
      run: maturin build --release --strip -o ${{ env.MATURIN_OUTPUT_DIR }}

    - name: Install wheels
      run: |
        pip install ${{ env.MATURIN_OUTPUT_DIR }}/*.whl
        pip install -e rvh_core_python     # Python ラッパを editable で

    # ────────────────────────────────
    # 4. Python テスト (Rust → Pure-Py)
    # ────────────────────────────────
    - name: pytest (Rust backend)
      run: pytest rvh_core_python/rvh_core/tests -q

    - name: pytest (pure-Python fallback)
      shell: bash
      run: |
        export RVH_FORCE_PYTHON=1
        pytest rvh_core_python/rvh_core/tests -q

    # ────────────────────────────────
    # 5. wheel をアーティファクト化（任意）
    # ────────────────────────────────
    - name: Upload wheel artifact
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: rvh_core_rust-${{ matrix.os }}-py${{ matrix.python-version }}
        path: ${{ env.MATURIN_OUTPUT_DIR }}/*.whl
