# D:\city_chain_project\network\DAGs\common\grpc_dag\dag_pb2_grpc.py
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import gen.dag_pb2 as dag__pb2


class DAGServiceStub(object):
    """gRPC サービス定義
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTransaction = channel.unary_unary(
                '/common.grpc_dag.gen.DAGService/SubmitTransaction',
                request_serializer=dag__pb2.TxRequest.SerializeToString,
                response_deserializer=dag__pb2.TxResponse.FromString,
                )
        self.QueryTransactionStatus = channel.unary_unary(
                '/common.grpc_dag.gen.DAGService/QueryTransactionStatus',
                request_serializer=dag__pb2.StatusRequest.SerializeToString,
                response_deserializer=dag__pb2.StatusResponse.FromString,
                )


class DAGServiceServicer(object):
    """gRPC サービス定義
    """

    def SubmitTransaction(self, request, context):
        """トランザクション送信
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryTransactionStatus(self, request, context):
        """トランザクションステータス問い合わせ
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DAGServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTransaction,
                    request_deserializer=dag__pb2.TxRequest.FromString,
                    response_serializer=dag__pb2.TxResponse.SerializeToString,
            ),
            'QueryTransactionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryTransactionStatus,
                    request_deserializer=dag__pb2.StatusRequest.FromString,
                    response_serializer=dag__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'common.grpc_dag.gen.DAGService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DAGService(object):
    """gRPC サービス定義
    """

    @staticmethod
    def SubmitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/common.grpc_dag.gen.DAGService/SubmitTransaction',
            dag__pb2.TxRequest.SerializeToString,
            dag__pb2.TxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryTransactionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/common.grpc_dag.gen.DAGService/QueryTransactionStatus',
            dag__pb2.StatusRequest.SerializeToString,
            dag__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
